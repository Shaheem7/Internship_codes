from scapy.all import *
from scapy.layers.inet import Ether
from gooseFunc import *


# Assuming GOOSE is not a built-in protocol in Scapy, you may need to define it manually
class GOOSE(Packet):
    name = "GOOSE"
    fields_desc = [
        # Define fields according to GOOSE specification
        # For example, these fields are placeholders and should be replaced with actual GOOSE fields
        StrField("appId", ""),
        IntField("length", 0),
        StrField("goosePdu", "")
    ]

# Bind the GOOSE layer to the Ethernet type for GOOSE (0x88B8)
bind_layers(Ether, GOOSE, type=0x88B8)

# Create an Ethernet packet with GOOSE payload
eth = Ether(dst="01:0c:cd:01:00:01", src="02:0c:cd:01:00:02", type=0x88B8) / GOOSE(appId="originalAppId", length=100, goosePdu="originalPayload")

# Display the original packet
print("Original packet:")
eth.show()

# Convert the packet to hexadecimal
hex_data = bytes(eth).hex()
print(f"\nHexadecimal representation: {hex_data}")

# Increase the frame length by adding extra payload
# Example: Adding 100 bytes of 'A' (0x41) to the payload
extra_payload = '41' * 100
# Assuming the GOOSE PDU starts at byte offset 18 (this should be adjusted based on actual packet structure)
modified_hex_data = hex_data[:36] + extra_payload + hex_data[36:]

print(f"\nModified Hexadecimal representation with increased length: {modified_hex_data}")

# Convert back to bytes
modified_bytes = bytes.fromhex(modified_hex_data)

# Rebuild the packet
modified_packet = Ether(modified_bytes)

# Display the modified packet
print("\nModified packet with increased length:")
modified_packet.show()

# Save both packets to a pcap file
wrpcap('goose_packets.pcap', [eth, modified_packet])

print("Packets saved to goose_packets.pcap")
