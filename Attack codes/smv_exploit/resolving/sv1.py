from pyasn1.type import univ, char, namedtype, tag, constraint
from pyasn1.codec.ber import decoder, encoder
from scapy.all import *

from scapy.layers.l2 import Ether, Dot1Q

from sv import SV
from sv_pdu import SavPDU, SeqASDU, ASDU, UtcTime, Data




# Function to decode packet
def decode_packet(encoded_data):
  
    savpdu = SavPDU().subtype(
        implicitTag = tag.Tag(
            tag.tagClassApplication,
            tag.tagFormatConstructed,
            0
        )
    )
        
    decoded_savpdu , rest_of_data = decoder.decode(
         encoded_data, 
        asn1Spec=savpdu
    )
    
    return decoded_savpdu
    



# Read the pcap file
packets = rdpcap('SV_Normal_Traffic.cap')

packets = packets[:100]
i = 0

for packet in packets:

    raw_data = packet.load
   
    decoded_savpdu = decode_packet(raw_data)

    seq_asdu = decoded_savpdu.getComponentByPosition(1)  
    asdu = seq_asdu.getComponentByPosition(0)  
    
    svID = asdu.getComponentByPosition(0)
    smp_cnt = asdu.getComponentByPosition(1)  
    confRev = asdu.getComponentByPosition(2)
    smp_sync = asdu.getComponentByPosition(3)
    seq_data = asdu.getComponentByPosition(4)
    

    asdu.setComponentByName('svID', 4000 + i)
    i += 1
    asdu.setComponentByName('smpCnt', 0)
 


    encoded_data = encoder.encode(decoded_savpdu)
    # print(encoded_data)

    raw_layer = decode_packet(encoded_data)

    # ether data
    src = packet.src
    dst = packet.dst
    type = packet.type

    # dot1q data
    Prio = packet[Dot1Q].prio
    Id = packet[Dot1Q].id  
    Vlan = packet[Dot1Q].vlan
    Type = packet[Dot1Q].type

    # sv data
    Appid = packet[SV].appid
    Length = packet[SV].length
    Reserved1 = packet[SV].reserved1
    Reserved2 = packet[SV].reserved2


    pkt = Ether(src=src, dst=dst, type=type)/Dot1Q(prio = Prio, id= Id, vlan=Vlan, type=Type)/SV(appid=Appid, reserved1 = Reserved1,reserved2=Reserved2)/encoded_data
    # pkt.show()


    wrpcap("sv_id1.pcapng", pkt, append=True)




