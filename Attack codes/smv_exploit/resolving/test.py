
### encoded and decoded the savpdu data successfully ###


from pyasn1.type import univ, char, namedtype, tag, useful, constraint
from pyasn1.codec.ber import encoder, decoder
from scapy.all import * 

class UtcTime(univ.OctetString):
    subtypeSpec = constraint.ValueSizeConstraint(8, 8)

class ASDU(univ.Sequence):
    componentType = namedtype.NamedTypes(
        namedtype.NamedType('svID', 
                  char.VisibleString().subtype(
                      implicitTag=tag.Tag(
                          tag.tagClassContext, 
                          tag.tagFormatSimple, 
                          0 #0x80
                        )
                    )
                ),
        namedtype.NamedType('datSet',
                  char.VisibleString().subtype(
                      implicitTag=tag.Tag(
                          tag.tagClassContext,
                          tag.tagFormatSimple,
                          1 # 0x81
                        )
                  )
                ),
        
        namedtype.NamedType('smpCnt', 
                  univ.Integer().subtype(
                      implicitTag=tag.Tag(
                          tag.tagClassContext, 
                          tag.tagFormatSimple, 
                          2 # 0x82 
                        )
                    )
                ),
        
        namedtype.NamedType('confRev', 
                  univ.Integer().subtype(
                      implicitTag=tag.Tag(
                          tag.tagClassContext, 
                          tag.tagFormatSimple, 
                          3 # 0x83 
                        )
                    )
                ),
        
        namedtype.NamedType('refrTm',
                  UtcTime().subtype(
                        implicitTag=tag.Tag(
                            tag.tagClassContext, 
                            tag.tagFormatSimple, 
                            4 # 0x84 
                            )
                        )
                  ),
        
        namedtype.NamedType('smpSynch', 
                  univ.Integer().subtype(
                      implicitTag=tag.Tag(
                          tag.tagClassContext, 
                          tag.tagFormatSimple, 
                          5 #0x85 
                        )
                    )
                ),
        
        namedtype.NamedType('smpRate',
                  univ.Integer().subtype(
                      implicitTag=tag.Tag(
                          tag.tagClassContext, 
                          tag.tagFormatSimple, 
                          6 # 0x86 
                        )
                    )
                ),
        
        namedtype.NamedType('seqData', 
                  univ.OctetString().subtype(
                      implicitTag=tag.Tag(
                          tag.tagClassContext, 
                          tag.tagFormatSimple, 
                          7 # 0x87 
                        )
                    )
                )
    )

class SeqASDU(univ.SequenceOf):
    componentType = ASDU()

# Instantiate ASDU
asdu_instance = ASDU()
asdu_instance.setComponentByName('svID', '4001')
asdu_instance.setComponentByName('datSet', 'IEC61850SV')
asdu_instance.setComponentByName('smpCnt', 1234)
asdu_instance.setComponentByName('confRev', 1)
asdu_instance.setComponentByName('refrTm', b'\x07\xdb\x0b\x0f\x11\x2b\x00\x00')
asdu_instance.setComponentByName('smpSynch', 0)
asdu_instance.setComponentByName('smpRate', 48)
asdu_instance.setComponentByName('seqData', 'this_is_a_test_data')

# Create SeqASDU and add ASDU instance
seq_asdu = SeqASDU()
seq_asdu.setComponentByPosition(0, asdu_instance)  # Indexing starts from 0

# Assume SAV is another defined structure
class SAV(univ.Sequence):
    componentType = namedtype.NamedTypes(
        namedtype.NamedType('noASDU', univ.Integer()),
        namedtype.NamedType('seqASDU', SeqASDU())
    )

sav = SAV()
sav.setComponentByName('noASDU', 1)
sav.setComponentByName('seqASDU', seq_asdu)


print(sav)

# Print or encode SAV
from pyasn1.codec.ber import encoder
encoded_sav = encoder.encode(sav)
print(encoded_sav)





# Sample captured packet (replace with actual data)
# captured_packet = bytes.fromhex('YOUR_CAPTURED_PACKET_HEX_STRING')

# path = "SV_Normal_Traffic.cap"
# packets = rdpcap(path)
# captured_packet = bytes.fromhex(packets[0].load.hex())

# Decode the packet
decoded_sav, rest_of_data = decoder.decode(encoded_sav, asn1Spec=SAV())

# Print the decoded structure
print(decoded_sav)
