from pyasn1.type import univ, char, namedtype, tag, constraint
from pyasn1.codec.ber import decoder, encoder
from scapy.all import *

from smv.sv import SV
from smv.sv_pdu import SavPDU, SeqASDU, ASDU, UtcTime, Data


# Function to decode packet
def decode_packet(encoded_data):
    try:
 
        savpdu = SavPDU().subtype(
            implicitTag = tag.Tag(
                tag.tagClassApplication,
                tag.tagFormatConstructed,
                0
            )
        )
        
        decoded_savpdu , rest_of_data = decoder.decode(
            encoded_data, 
            asn1Spec=savpdu
        )
        
        print("Decoded SAV:")
        print(decoded_savpdu.prettyPrint())
        print("Remaining data after decoding SAV:")
        # print(binascii.hexlify(rest_of_data))
    except Exception as e:
        print(f"Decoding error: {e}")
        
    return decoded_savpdu
    



# Read the pcap file
packets = rdpcap('SV_Normal_Traffic.cap')
packet = packets[0]

packet.show()
packet_load_start_sv = packet.load[:8] 

# from pyasn1 import debug
# debug.setLogger(debug.Debug('all'))


# Extract the raw packet data (assuming it's in the payload)
raw_data = packet.load
print(raw_data)


decoded_savpdu = decode_packet(raw_data)


# s = decoded_savpdu.getComponentByName('seqASDU').getComponentByName('asdu').getComponentByName('smpCnt').getComponentByName('value')
# print(s)


seq_asdu = decoded_savpdu.getComponentByPosition(1)  
asdu = seq_asdu.getComponentByPosition(0)  
smp_cnt = asdu.getComponentByPosition(1)  
# value = smp_cnt.getComponentByPosition(0) 



print(smp_cnt)

asdu.setComponentByName('smpCnt', 100)
print(asdu)


encoded_data = encoder.encode(decoded_savpdu)
print(encoded_data)
mod_packet = packet_load_start_sv + encoded_data

print(mod_packet)


src = packet.src
dst = packet.dst
print(src)

from scapy.layers.l2 import Ether, Dot1Q

pkt = Ether(src=src, dst=dst)/Dot1Q(prio = 4) /SV()/mod_packet

print(pkt.show())


wrpcap('mod_packet.pcap', pkt)