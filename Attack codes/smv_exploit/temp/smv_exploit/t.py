# tried modifying hex values but it didn't work


from scapy.all import *
from scapy.layers.l2 import Dot1Q, Ether

# Define the raw data from your packet
raw_data = b'@\x01\x00f\x00\x00\x00\x00`\\x80\x01\x01\\xa2W0U\\x80\x044001\\x82\x02\x01\x18\\x83\x04\x00\x00\x00\x01\\x85\x01\x02\\x87@\\xff\\xfeY\\x82\x00\x00\x00\x00\x00\x04=\\xdc\x00\x00\x00\x00\\xff\\xfdo\\x00\x00\x00\x00\x00\x00\x06\\xba\x00\x00 \x00\\xff\\x8d\\xf4\x00\x00\x00\x00\x00\x01\x1d\\xfb\\xc2\x00\x00\x00\x00\\xffU`\x0c\x00\x00\x00\x00\x00\x01O\\xce\x00\x00 \x00'

# Construct the packet
packet = Ether(dst="01:0c:cd:04:00:02", src="ca:fe:c0:ff:ee:69", type=0x8100) / Dot1Q(prio=4, id=0, vlan=1, type=0x88ba) / Raw(load=raw_data)

# Extract the raw layer
raw_layer = packet[Raw]

# Convert the raw data to a mutable bytearray
mutable_raw_data = bytearray(raw_layer.load)

# Modify some parameters in the raw data (example: change the first byte)
# mutable_raw_data[4] = 0x55  # Change '@' (0x40) to 'B' (0x42)
print(packet.load[:6])


for i in range(0, 6):
    print(hex(packet.load[i]))
# Reconstruct the packet with the modified raw data
modified_packet = packet.copy()
modified_packet[Raw].load = bytes(mutable_raw_data)

# Display the modified packet
modified_packet.show()
wrpcap("modified_packet.pcap", modified_packet)

# Send the modified packet (optional)
# sendp(modified_packet)
