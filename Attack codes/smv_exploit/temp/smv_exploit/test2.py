# NOTE: Using the struct approach
#           successfully extracted the layers and parameters but not able to parse ASDU layer properly.


from scapy.packet import Packet, bind_layers
from scapy.fields import XByteField, FieldLenField, StrLenField, ShortField, UTCTimeField, Field
from scapy.layers.l2 import Ether, Dot1Q
from scapy.compat import raw
from scapy.all import *

class SV(Packet):
    name = "sv"
    fields_desc = [ ShortField("APPID", 3),
                    ShortField("Length", None),
                    ShortField("Reserved1", 0),
                    ShortField("Reserved2", 0),
                    # XByteField("savPDU_Tag", 0x60),
                    # BERTotLenField("savPDU_Length", None),
                    # XByteField("noASDU_Tag", 0x80),
                    # BERLenQField("noASDU_Length", None, "noASDU"),
                    # StrLenField("noASDU", "", length_from=lambda x:x.noASDU_Length),
                    # XByteField("SeqASDU", 0xa2),
                    # BERTotLenField("SeqADSU_Length", None)
                  ]

def vlenq2bytes(val):
    s = list()
    first = 0x80
    s.append(val & 0x7f)
    val = val >> 7
    count = 1
    while val:
        s.append(0x80 | (val & 0x7F))
        val = val >> 7
        count += 1
    if count > 1:
        s.append(first+count)
        s.reverse()
    return bytes(s)
        
def bytes2vlenq(m):
    count = l = 0
    i = 1
    longform = m[0] & 0x7f
    if m[0] > 127:
        count = longform
    else:
        l = longform
        i = 1
    for x in range(count):
        l = l << 7
        l = l + x
        i = i + 1
    return m[i:], l

class BERLenQField(Field):
    __slots__ = ["fld"]
    
    def __init__(self, name, default, fld):
        Field.__init__(self, name, default)
        self.fld = fld
        
    def i2m(self, pkt, x):
        if x is None:
            f = pkt.get_field(self.fld)
            try:
                x = f.i2len(pkt, pkt.getfieldval(self.fld))
            except:
                x = len(bytes([pkt.getfieldval(self.fld)]))
            x = vlenq2bytes(x)
        return raw(x)
    
    def m2i(self, pkt, x):
        if x is None:
            return None, 0
        return bytes2vlenq(x)[1]
    
    def addfield(self, pkt, s, val):
        return s+self.i2m(pkt,val)
    
    def getfield(self, pkt, s):
        return bytes2vlenq(s)
class ASDU(Packet):
    name = "ASDU"
    fields_desc = [ 
                #    XByteField("ASDU_Tag", 0x30),
                    # BERTotLenField("ASDU_Length", None),
                    
                    XByteField("svID", 0x80),
                    # BERLenQField("svID_Length", None, "svID"),
                    # StrLenField("svID", "sv tst", length_from=lambda x:x.svID_Length),
                    
                    XByteField("smpCnt", 0x82),
                    # BERLenQField("smpCnt_Length", None, "smpCnt"),
                    # StrLenField("smpCnt", "1", length_from=lambda x:x.smpCnt_Length),

                    XByteField("confRev", 0x83),
                    # BERLenQField("confRev_Length", None, "confRev"),
                    # StrLenField("confRev", "1", length_from=lambda x:x.confRev_Length),

                    XByteField("smpSynch", 0x85),
                    # BERLenQField("smpSynch_Length", None, "smpSynch"),
                    # StrLenField("smpSynch", "1", length_from=lambda x:x.smpSynch_Length),

                    # XByteField("SeqData", 0x87),
                    BERLenQField("SeqData_Length", None, "SeqData"),
                    StrLenField("SeqData", "test", length_from=lambda x:x.SeqData_Length)
        ]

path = "C:/Users/Shaheem Mushtaq/Desk env/Work ðŸ’¼/Internship/Attack codes/smv_exploit/SV_Normal_Traffic.cap"
packets = rdpcap(path)
packet = packets[2]


packet.show()
print(packet.load)


sv = SV(packet.load)


print(sv)
print(hex(sv.APPID))
print(sv.Length)
print(sv.Reserved1)
print(sv.Reserved2)

print(sv.show())

from m2 import SAVPDU
savpdu = SAVPDU(sv.load)

savpdu.show()

print(hex(savpdu.noASDU))


asdu = ASDU(savpdu.load)

asdu.show()
