from pyasn1.codec.ber import decoder
from pyasn1.type.univ import Sequence, OctetString, Integer
from pyasn1.type.namedtype import NamedTypes, NamedType

from pyasn1.type import tag
from scapy.all import hexdump


# Define the ASN.1 structure for ASDU
class ASDU(Sequence):
    componentType = NamedTypes(
        NamedType('svID', OctetString()),
        NamedType('smpCnt', Integer()),
        NamedType('confRev', Integer()),
        NamedType('smpSynch', Integer()),
        NamedType('seqData', OctetString())
    )

# Decode the APDU (savPDU)
def decode_apdu(data):
    apdu_tag = data[0]
    apdu_length = data[1]
    apdu_value = data[2:2 + apdu_length]
    return apdu_value

# Extract and decode noASDU and seqASDU
def decode_savpdu(savpdu_data):
    idx = 0
    while idx < len(savpdu_data):
        tag = savpdu_data[idx]
        length = savpdu_data[idx + 1]
        value = savpdu_data[idx + 2:idx + 2 + length]
        
        if tag == 0x80:  # noASDU
            no_asdu = value
            print("noASDU:", no_asdu)
        elif tag == 0xA2:  # seqASDU
            seq_asdu = value
            print("seqASDU:", seq_asdu)
            # decode_seq_asdu(seq_asdu)
        
        idx += 2 + length

    return no_asdu, seq_asdu
    
    
# Decode sequence of ASDUs
def decode_seq_asdu(seq_asdu_data):
    # asdu_data, _ = decoder.decode(seq_asdu_data, asn1Spec=Sequence(ASDU()))
    # asdu_data, _ = decoder.decode(seq_asdu_data, asn1Spec=ASDU())

    try:
        asdu_data, _ = decoder.decode(seq_asdu_data, asn1Spec=ASDU())
        print("ASDU:")
        print("  svID:", asdu_data.getComponentByName('svID'))
        print("  smpCnt:", asdu_data.getComponentByName('smpCnt'))
        print("  confRev:", asdu_data.getComponentByName('confRev'))
        print("  smpSynch:", asdu_data.getComponentByName('smpSynch'))
        print("  seqData:", asdu_data.getComponentByName('seqData'))
    except Exception as e:
        print(f"Error decoding ASDU: {e}")



# def decode_seq_asdu(encoded_data):
#     # Define the ASN.1 structure for SV Protocol
#     sv = ASDU().subtype(
#         implicitTag=tag.Tag(
#             tag.tagClassApplication,
#             tag.tagFormatConstructed,
#             1  # Adjust tag number according to SV protocol
#         )
#     )

#     try:
#         # Decode the encoded_data using the defined ASN.1 structure
#         decoded_data, unprocessed_trail = decoder.decode(encoded_data, asn1Spec=sv)
#         return decoded_data
#     except Exception as e:
#         print(f"Error decoding SV Protocol data: {e}")
#         return None



from scapy.all import rdpcap
from sv import SV

path = "source.pcapng"
packets = rdpcap(path)
packet = packets[0]

# Extract the SV layer
sv_layer = packet[SV]

# Decode the APDU (savPDU) from the SV layer
apdu_value = decode_apdu(bytes(sv_layer.payload))

# Decode and print the contents of savPDU
_, seq_asdu = decode_savpdu(apdu_value)


# print("seq_asdu_data:", seq_asdu_data)
hexdump(seq_asdu)


decode_seq_asdu(seq_asdu)