from pyasn1.codec.ber import decoder
from pyasn1.type.univ import Sequence, OctetString, Integer
from pyasn1.type.namedtype import NamedTypes, NamedType
from pyasn1.type.tag import Tag, tagClassContext, tagFormatSimple
from pyasn1.type.univ import SequenceOf

# Define the ASN.1 structure for ASDU with implicit tags
class ASDU(Sequence):
    componentType = NamedTypes(
        NamedType('svID', OctetString().subtype(implicitTag=Tag(tagClassContext, tagFormatSimple, 0))),
        NamedType('smpCnt', Integer().subtype(implicitTag=Tag(tagClassContext, tagFormatSimple, 2))),
        NamedType('confRev', Integer().subtype(implicitTag=Tag(tagClassContext, tagFormatSimple, 3))),
        NamedType('smpSynch', Integer().subtype(implicitTag=Tag(tagClassContext, tagFormatSimple, 5))),
        NamedType('seqData', OctetString().subtype(implicitTag=Tag(tagClassContext, tagFormatSimple, 7)))
    )

    
# Define the ASN.1 structure for a sequence of ASDUs
class SeqASDU(SequenceOf):
    componentType = ASDU()

# Decode the APDU (savPDU)
def decode_apdu(data):
    apdu_tag = data[0]
    apdu_length = data[1]
    apdu_value = data[2:2 + apdu_length]
    return apdu_value

# Extract and decode noASDU and seqASDU
def decode_savpdu(savpdu_data):
    idx = 0
    while idx < len(savpdu_data):
        tag = savpdu_data[idx]
        length = savpdu_data[idx + 1]
        value = savpdu_data[idx + 2:idx + 2 + length]

        if tag == 0x80:  # noASDU
            no_asdu = value
            print("noASDU:", no_asdu)
        elif tag == 0xA2:  # seqASDU
            seq_asdu = value
            print("seqASDU:", seq_asdu)
            decode_seq_asdu(seq_asdu)

        idx += 2 + length

# Decode sequence of ASDUs
def decode_seq_asdu(seq_asdu_data):
    try:
        asdu_data, _ = decoder.decode(seq_asdu_data, asn1Spec=SeqASDU())
        for asdu in asdu_data:
            print("ASDU:")
            print("  svID:", asdu.getComponentByName('svID'))
            print("  smpCnt:", asdu.getComponentByName('smpCnt'))
            print("  confRev:", asdu.getComponentByName('confRev'))
            print("  smpSynch:", asdu.getComponentByName('smpSynch'))
            print("  seqData:", asdu.getComponentByName('seqData'))
    except Exception as e:
        print(f"Error decoding ASDU: {e}")




from sv import SV
from scapy.all import rdpcap

path = "source.pcapng"
packets = rdpcap(path)
packet = packets[0]

# Extract the SV layer
sv_layer = packet[SV]

# Decode the APDU (savPDU) from the SV layer
apdu_value = decode_apdu(bytes(sv_layer.payload))

# Decode and print the contents of savPDU
decode_savpdu(apdu_value)
