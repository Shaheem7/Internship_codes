from pyasn1.type.univ import OctetString, Integer, Sequence, SequenceOf
from pyasn1.type.namedtype import NamedTypes, NamedType
from pyasn1.type.tag import Tag, tagClassContext, tagFormatConstructed, tagFormatSimple
from pyasn1.type import tag, univ
from pyasn1.codec.ber import decoder
from scapy.all import *
from struct import pack 
from scapy.layers.l2 import Ether

# Define the SV Packet Layer
class SV(Packet):
    name = "sv"
    fields_desc = [
        XShortField("appid", 0),
        XShortField("length", 8),
        XShortField("reserved1", 0),
        XShortField("reserved2", 0),
    ]

    def post_build(self, packet, payload):
        sv_pdu_length = len(packet) + len(payload)
        packet = packet[:2] + pack('!H', sv_pdu_length) + packet[4:]
        return packet + payload
    
# Bind the SV layer to the Ethernet layer
bind_layers(Ether, SV, type=0x88ba)

# Define the ASN.1 structure for ASDU
class ASDU(univ.Sequence):
    componentType = NamedTypes(
        NamedType('svID', 
                  OctetString().subtype(
                      implicitTag=Tag(
                          tag.tagClassContext, 
                          tag.tagFormatSimple, 
                          0 #0x80
                        )
                    )
                ),
        NamedType('smpCnt', 
                  Integer().subtype(
                      implicitTag=Tag(
                          tag.tagClassContext, 
                          tag.tagFormatSimple, 
                          1 # 0x82 
                        )
                    )
                ),
        NamedType('confRev', 
                  Integer().subtype(
                      implicitTag=Tag(
                          tag.tagClassContext, 
                          tag.tagFormatSimple, 
                          2 # 0x83 
                        )
                    )
                ),
        NamedType('smpSynch', 
                  Integer().subtype(
                      implicitTag=Tag(
                          tag.tagClassContext, 
                          tag.tagFormatSimple, 
                          3 #0x85 
                        )
                    )
                ),
        NamedType('seqData', 
                  OctetString().subtype(
                      implicitTag=Tag(
                          tag.tagClassContext, 
                          tag.tagFormatSimple, 
                          4 # 0x87 
                        )
                    )
                )
    )

# Define the ASN.1 structure for SeqASDU
class SeqASDU(SequenceOf):
    componentType = ASDU()


def asdu_decode(encoded_data):
    asdu = ASDU().subtype(
        implicitTag=tag.Tag(
            tag.tagClassApplication,
            tag.tagFormatConstructed,
            1
        )
    )
    print(f"Encoded : {encoded_data}")

    decoded_data, unprocessed_trail = decoder.decode(
        encoded_data,
        asn1Spec=asdu
    )
    
    print(decoded_data)
    
    return decoded_data


# Example packet capturing and parsing function
def parse_sv_packet(packet):
    # Extract SV payload
    sv_payload = packet[SV].load

    # Parsing the savPDU using the Tag-Length-Value structure
    try:
        no_asdu_tag = sv_payload[2]
        no_asdu_length = sv_payload[3]
        no_asdu_value = sv_payload[4:4+no_asdu_length]

        seq_asdu_tag = sv_payload[4+no_asdu_length]
        seq_asdu_length = sv_payload[5+no_asdu_length]
        seq_asdu_value = sv_payload[6+no_asdu_length:6+no_asdu_length+seq_asdu_length]

        print(f"noASDU: {no_asdu_value}")
        print(f"seqASDU: {seq_asdu_value}")
    
        # Decode the SeqASDU data
        asdu_data, rest_of_data = decoder.decode(seq_asdu_value, asn1Spec=SeqASDU())
        for asdu in asdu_data:
            print(f"svID: {asdu['svID']}")
            print(f"smpCnt: {asdu['smpCnt']}")
            print(f"confRev: {asdu['confRev']}")
            print(f"smpSynch: {asdu['smpSynch']}")
            print(f"seqData: {asdu['seqData']}")
    except Exception as e:
        print(f"Error decoding ASDU: {e}")





# Capture packet (example, this needs to be replaced with actual capture logic)
path = "SV_Normal_Traffic.cap"
packets = rdpcap(path)
packet = packets[1]



packet[Ether].show()

sv_layer = packet[SV]

sv_layer.show() 

asdu_decode(sv_layer.load)

# parse_sv_packet(packet)
