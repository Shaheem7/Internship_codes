from pyasn1.type.univ import OctetString, Integer, Sequence, SequenceOf
from pyasn1.type.namedtype import NamedTypes, NamedType
from pyasn1.type.tag import Tag, tagClassContext, tagFormatConstructed, tagFormatSimple
from pyasn1.type import tag, univ
from pyasn1.codec.ber import encoder, decoder
from scapy.all import *
from struct import pack
from scapy.layers.l2 import Ether

# Define the SV Packet Layer
class SV(Packet):
    name = "sv"
    fields_desc = [
        XShortField("appid", 0),
        XShortField("length", 8),
        XShortField("reserved1", 0),
        XShortField("reserved2", 0),
    ]

    def post_build(self, packet, payload):
        sv_pdu_length = len(packet) + len(payload)
        packet = packet[:2] + pack('!H', sv_pdu_length) + packet[4:]
        return packet + payload

# Bind the SV layer to the Ethernet layer
bind_layers(Ether, SV, type=0x88ba)

# Define the ASN.1 structure for ASDU
class ASDU(univ.Sequence):
    componentType = NamedTypes(
        NamedType('svID', OctetString().subtype(implicitTag=Tag(tagClassContext, tagFormatSimple, 0))),
        NamedType('smpCnt', Integer().subtype(implicitTag=Tag(tagClassContext, tagFormatSimple, 1))),
        NamedType('confRev', Integer().subtype(implicitTag=Tag(tagClassContext, tagFormatSimple, 2))),
        NamedType('smpSynch', Integer().subtype(implicitTag=Tag(tagClassContext, tagFormatSimple, 3))),
        NamedType('seqData', OctetString().subtype(implicitTag=Tag(tagClassContext, tagFormatSimple, 4)))
    )

# Define the ASN.1 structure for SeqASDU
class SeqASDU(SequenceOf):
    componentType = ASDU().subtype(explicitTag=Tag(tagClassContext, tagFormatConstructed, 0))

def asdu_decode(encoded_data):
    asdu = ASDU().subtype(implicitTag=Tag(tag.tagClassApplication, tag.tagFormatConstructed, 1))
    decoded_data, unprocessed_trail = decoder.decode(encoded_data, asn1Spec=asdu)
    return decoded_data

# Example packet capturing and parsing function
def parse_sv_packet(packet):
    # Extract SV payload
    sv_payload = packet[SV].load
    print(f"sv_payload: {sv_payload}")

    # Parsing the savPDU using the Tag-Length-Value structure
    try:
        no_asdu_tag = sv_payload[2]
        no_asdu_length = sv_payload[3]
        print(f"noASDU tag: {no_asdu_tag}")
        print(f"noASDU length: {no_asdu_length}")
        no_asdu_value = sv_payload[4:4+no_asdu_length]

        seq_asdu_tag = sv_payload[4+no_asdu_length]
        seq_asdu_length = sv_payload[5+no_asdu_length]
        seq_asdu_value = sv_payload[6+no_asdu_length:6+no_asdu_length+seq_asdu_length]

        print(f"noASDU: {no_asdu_value}")
        print(f"seqASDU: {seq_asdu_value}")

        # Decode the SeqASDU data               # seq_asdu_value
        asdu_data, rest_of_data = decoder.decode(seq_asdu_value, asn1Spec=SeqASDU())
        for asdu in asdu_data:
            print(f"svID: {asdu['svID']}")
            print(f"smpCnt: {asdu['smpCnt']}")
            print(f"confRev: {asdu['confRev']}")
            print(f"smpSynch: {asdu['smpSynch']}")
            print(f"seqData: {asdu['seqData']}")
    except Exception as e:
        print(f"Error decoding ASDU: {e}")


def create_test_asdu_packet():
    # Create ASDU instance
    asdu = ASDU()
    # asdu.setComponentByPosition(0, OctetString('4001'))
    # asdu.setComponentByName('svID', OctetString('4001'))
    asdu.svID = OctetString('4001')
    # asdu.setComponentByPosition(1, Integer(280))
    # asdu.setComponentByName('smpCnt', Integer(280))
    asdu.smpCnt = Integer(280)
    # asdu.setComponentByPosition(2, Integer(1))
    # asdu.setComponentByName('confRev', Integer(1))
    asdu.confRev = Integer(1)
    # asdu.setComponentByPosition(3, Integer(2))
    # asdu.setComponentByName('smpSynch', Integer(2))
    asdu.smpSynch = Integer(2)
    # asdu.setComponentByPosition(4, OctetString(b'\xff\xfe\x59\x82\x00\x00\x00\x00\x00\x04\x3d\xdc\x00\x00\x00\x00\xff\xfd\x6f\x5c\x00\x00\x00\x00\x00\x00\x06\xba\x00\x00\x20\x00\xff\x8d\xf4\x00\x00\x00\x00\x00\x01\x1d\xfb\xc2\x00\x00\x00\x00\xff\x55\x60\x0c\x00\x00\x00\x00\x00\x01\x4f\xce\x00\x00\x20\x00'))
    # asdu.setComponentByName('seqData', OctetString(b'\xff\xfe\x59\x82\x00\x00\x00\x00\x00\x04\x3d\xdc\x00\x00\x00\x00\xff\xfd\x6f\x5c\x00\x00\x00\x00\x00\x00\x06\xba\x00\x00\x20\x00\xff\x8d\xf4\x00\x00\x00\x00\x00\x01\x1d\xfb\xc2\x00\x00\x00\x00\xff\x55\x60\x0c\x00\x00\x00\x00\x00\x01\x4f\xce\x00\x00\x20\x00'))
    asdu.seqData = OctetString(b'\xff\xfe\x59\x82\x00\x00\x00\x00\x00\x04\x3d\xdc\x00\x00\x00\x00\xff\xfd\x6f\x5c\x00\x00\x00\x00\x00\x00\x06\xba\x00\x00\x20\x00\xff\x8d\xf4\x00\x00\x00\x00\x00\x01\x1d\xfb\xc2\x00\x00\x00\x00\xff\x55\x60\x0c\x00\x00\x00\x00\x00\x01\x4f\xce\x00\x00\x20\x00')

    # Create SeqASDU instance and add ASDU
    seq_asdu = SeqASDU()
    seq_asdu.setComponentByPosition(0, asdu)
    # seq_asdu[asdu]

    # Encode SeqASDU
    encoded_seq_asdu = encoder.encode(seq_asdu)

    # Construct SV packet
    sv_packet = Ether() / SV(appid=0x4001) / encoded_seq_asdu
    return sv_packet



# test_packet = create_test_asdu_packet()
# test_packet.show()
asdu = ASDU()
asdu.setComponentByName('svID', OctetString('4001'))
# asdu.setComponentByName('smpCnt', Integer(280))
# asdu.setComponentByName('confRev', Integer(1))
# asdu.setComponentByName('smpSynch', Integer(2))
# asdu.setComponentByName('seqData', OctetString(b'\xff\xfe\x59\x82\x00\x00\x00\x00\x00\x04\x3d\xdc\x00\x00\x00\x00\xff\xfd\x6f\x5c\x00\x00\x00\x00\x00\x00\x06\xba\x00\x00\x20\x00\xff\x8d\xf4\x00\x00\x00\x00\x00\x01\x1d\xfb\xc2\x00\x00\x00\x00\xff\x55\x60\x0c\x00\x00\x00\x00\x00\x01\x4f\xce\x00\x00\x20\x00'))

print(asdu.prettyPrint())


# Capture packet (example, this needs to be replaced with actual capture logic)
path = "SV_Normal_Traffic.cap"
packets = rdpcap(path)
packet = packets[0]

# packet[Ether].show()

sv_layer = packet[SV]
# sv_layer.show()

# parse_sv_packet(packet)

