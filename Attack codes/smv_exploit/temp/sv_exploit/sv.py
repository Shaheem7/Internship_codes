from struct import pack

from scapy.packet import Packet
from scapy.fields import ShortField, XShortField, XByteField, ConditionalField
from scapy.all import bind_layers
from scapy.layers.l2 import Ether


# Extract and decode noASDU and seqASDU
# def decode_savpdu(savpdu_data):
#     idx = 0
#     while idx < len(savpdu_data):
#         tag = savpdu_data[idx]
#         length = savpdu_data[idx + 1]
#         value = savpdu_data[idx + 2:idx + 2 + length]
        
#         if tag == 0x80:  # noASDU
#             no_asdu = value
#             print("noASDU:", no_asdu)
#         elif tag == 0xA2:  # seqASDU
#             seq_asdu = value
#             print("seqASDU:", seq_asdu)
#             # decode_seq_asdu(seq_asdu)
        
#         idx += 2 + length

#     return no_asdu, seq_asdu


class SV(Packet):
    name = "sv"
    fields_desc = [
        XShortField("appid", 0),
        XShortField("length", 8),
        XShortField("reserved1", 0),
        XShortField("reserved2", 0),
    ]

    def post_build(self, packet, payload):
        sv_pdu_length = len(packet) + len(payload)
        packet = packet[:2] + pack('!H', sv_pdu_length) + packet[4:]
        return packet + payload
    

# class SAVPDU(Packet):
#     name = "savpdu"
#     fields_desc = [
#         XByteField("tag", 0),
#         XByteField("length", 0),
#         ConditionalField(SV(), lambda pkt: pkt.tag == 0x80),
#         ConditionalField(SV(), lambda pkt: pkt.tag == 0xA2),
#     ]





# NOTE: All the magic is in binding the layers carefully.
bind_layers(Ether, SV, type=0x88ba)

