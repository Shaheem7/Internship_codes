from scapy.all import *
from scapy.packet import Packet, bind_layers
from scapy.fields import ByteField, IntField, ShortField, StrFixedLenField, XShortField, BitField, ConditionalField, PacketField, PacketListField, RawField

# Define the field structures as per the dissect_sv function and the IEC 61850 Sampled Values structure.

class SVHeader(Packet):
    name = "SVHeader"
    fields_desc = [
        ShortField("appid", 0),
        ShortField("length", 0),
        XShortField("reserve1", 0),
        XShortField("reserve2", 0)
    ]

class PhsMeasQ(Packet):
    name = "PhsMeasQ"
    fields_desc = [
        BitField("validity", 0, 2),
        BitField("reserved", 0, 2),
        BitField("overflow", 0, 1),
        BitField("out_of_range", 0, 1),
        BitField("bad_reference", 0, 1),
        BitField("oscillatory", 0, 1),
        BitField("failure", 0, 1),
        BitField("old_data", 0, 1),
        BitField("inconsistent", 0, 1),
        BitField("inaccurate", 0, 1),
        BitField("source", 0, 1),
        BitField("test", 0, 1),
        BitField("operator_blocked", 0, 1),
        BitField("derived", 0, 1),
        BitField("reserved2", 0, 14)
    ]

class PhsMeas(Packet):
    name = "PhsMeas"
    fields_desc = [
        IntField("instMagI", 0),
        PacketField("quality", PhsMeasQ(), PhsMeasQ)
    ]

class ASDU(Packet):
    name = "ASDU"
    fields_desc = [
        StrFixedLenField("svID", b"", 32),
        StrFixedLenField("datSet", b"", 32),
        IntField("smpCnt", 0),
        IntField("confRev", 0),
        ConditionalField(IntField("refrTm", 0), lambda pkt: pkt.length > 4),
        ConditionalField(ByteField("smpSynch", 0), lambda pkt: pkt.length > 5),
        ConditionalField(IntField("smpRate", 0), lambda pkt: pkt.length > 6),
        PacketListField("data", [], PhsMeas, length_from=lambda pkt: pkt.length - 8)
    ]

class SeqASDU(Packet):
    name = "SeqASDU"
    fields_desc = [
        PacketListField("asdu", [], ASDU, length_from=lambda pkt: pkt.underlayer.length - 2)
    ]

class SavPdu(Packet):
    name = "SavPdu"
    fields_desc = [
        ShortField("noASDU", 0),
        PacketField("seqASDU", SeqASDU(), SeqASDU)
    ]

class SampledValues(Packet):
    name = "SampledValues"
    fields_desc = [
        PacketField("savPdu", SavPdu(), SavPdu)
    ]

bind_layers(SVHeader, SampledValues, length=12)
bind_layers(SampledValues, Raw)

def decode_sv_packet(packet_data):
    packet = SVHeader(packet_data)
    packet.show()

# Load a captured packet (replace 'captured_packet.pcap' with your pcap file)
path = "source.pcapng"
packets = rdpcap(path)
packet = packets[0]
# Decode the first packet
decode_sv_packet(bytes(packets[0]))
