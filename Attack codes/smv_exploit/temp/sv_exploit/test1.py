from pyasn1.type import univ, namedtype, namedval, tag
from pyasn1.codec.der import encoder, decoder
from scapy.all import hexdump, rdpcap

from s5 import ASDU

# Example data to encode
data_to_encode = {
    'svID': b'\x01\x02\x03',
    'smpCnt': 123,
    'confRev': 456,
    'smpSynch': 789,
    'seqData': b'\x0a\x0b\x0c'
}

# Create an instance of ASDU and encode the data
asdu_instance = ASDU()
asdu_instance['svID'] = data_to_encode['svID']
asdu_instance['smpCnt'] = data_to_encode['smpCnt']
asdu_instance['confRev'] = data_to_encode['confRev']
asdu_instance['smpSynch'] = data_to_encode['smpSynch']
asdu_instance['seqData'] = data_to_encode['seqData']

# encoded_data = encoder.encode(asdu_instance)
# print("Encoded data:", encoded_data)
# print(hexdump(encoded_data))


path = "source.pcapng"
packets = rdpcap(path)
packet = packets[0]

encoded_data = packet.load[7:]

# Decode and validate the encoded data
decoded_data, _ = decoder.decode(encoded_data, asn1Spec=ASDU())

# Compare decoded data with original data
assert decoded_data['svID'] == data_to_encode['svID']
assert decoded_data['smpCnt'] == data_to_encode['smpCnt']
assert decoded_data['confRev'] == data_to_encode['confRev']
assert decoded_data['smpSynch'] == data_to_encode['smpSynch']
assert decoded_data['seqData'] == data_to_encode['seqData']

print("Decoded data:" , decoded_data)  







# hexdump(packet.load)
pkt = packet.load[7:]
hexdump(pkt)
