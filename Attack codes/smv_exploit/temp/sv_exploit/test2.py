from pyasn1.type.univ import OctetString, Integer, Sequence, SequenceOf
from pyasn1.type.namedtype import NamedTypes, NamedType
from pyasn1.type.tag import Tag, tagClassContext, tagFormatSimple
from pyasn1.codec.ber import encoder
from scapy.all import *
from scapy.layers.l2 import Ether

from sv import SV

# Define the ASN.1 structure for ASDU
class ASDU(Sequence):
    componentType = NamedTypes(
        NamedType('svID', OctetString().subtype(implicitTag=Tag(tagClassContext, tagFormatSimple, 0))),
        NamedType('smpCnt', Integer().subtype(implicitTag=Tag(tagClassContext, tagFormatSimple, 1))),
        NamedType('confRev', Integer().subtype(implicitTag=Tag(tagClassContext, tagFormatSimple, 2))),
        NamedType('smpSynch', Integer().subtype(implicitTag=Tag(tagClassContext, tagFormatSimple, 3))),
        NamedType('seqData', OctetString().subtype(implicitTag=Tag(tagClassContext, tagFormatSimple, 4)))
    )

# Define the ASN.1 structure for SeqASDU
class SeqASDU(SequenceOf):
    componentType = ASDU()

def build_sv_packet(svID, smpCnt, confRev, smpSynch, seqData):
    # Create an ASDU object
    asdu = ASDU()
    asdu['svID'] = OctetString(svID)
    asdu['smpCnt'] = Integer(smpCnt)
    asdu['confRev'] = Integer(confRev)
    asdu['smpSynch'] = Integer(smpSynch)
    asdu['seqData'] = OctetString(seqData)

    # Create a SeqASDU object and append the ASDU to it
    seq_asdu = SeqASDU()
    seq_asdu.append(asdu)

    # Encode SeqASDU using BER
    seq_asdu_encoded = encoder.encode(seq_asdu)

    # Create SV packet using Scapy
    sv_packet = Ether() / SV(appid=1234) / Raw(seq_asdu_encoded)
    
    # Set the SV packet length
    sv_packet.length = len(sv_packet)

    return sv_packet

# Example usage: Build a sample SV packet
sv_packet = build_sv_packet(b'01', 100, 1, 0, b'hello')

# Print the SV packet summary
print(sv_packet.summary())

# Show the packet layers
sv_packet.show()
