from scapy.all import *
from scapy.layers.l2 import Ether

class IEC61850(Packet):
    name = "IEC61850 Sampled Values"
    fields_desc = [
        XShortField("appid", 0x4001),
        XShortField("length", None),
        XShortField("reserved1", 0),
        XShortField("reserved2", 0),
        PacketField("savPdu", None, [])
    ]

class ASDU(Packet):
    name = "ASDU"
    fields_desc = [
        StrFixedLenField("svID", "", length=4),  # VisibleString with length 4
        StrFixedLenField("datSet", "", length=4),  # Optional VisibleString with length 4
        ShortField("smpCnt", 0),  # INTEGER (0..65535)
        IntField("confRev", 0),  # INTEGER (0..4294967295)
        Field("refrTm", 0, fmt="I"),  # UtcTime (Assuming 4-byte integer format for simplicity)
        ByteEnumField("smpSynch", 0, {0: "none", 1: "local", 2: "global"}),  # INTEGER { none(0), local(1), global(2) }
        ShortField("smpRate", 0 ),  # INTEGER (0..65535)
        StrField("seqData", b""),  # Data
        ByteEnumField("smpMod", 0, {0: "samplesPerNormalPeriod", 1: "samplesPerSecond", 2: "secondsPerSample"}),  # INTEGER { samplesPerNormalPeriod(0), samplesPerSecond(1), secondsPerSample(2) }
        StrField("gmidData", b"")  # GmidData
    ]

class savPdu(Packet):
    name = "savPdu"
    fields_desc = [
        ByteField("noASDU", 1),
        PacketListField("seqASDU", [], ASDU)
    ]


# Bind layers to define relationships
bind_layers(IEC61850, savPdu)
bind_layers(savPdu, ASDU)

# Example capture packet data (replace with your actual captured packet data)
path = "SV_Normal_Traffic.cap"
packets = rdpcap(path)
capture_packet_data = packets[0]

# Decode the captured packet
pkt = Ether(capture_packet_data)  # Assuming Ethernet encapsulation for example
decoded_pkt = IEC61850(pkt)

# Print decoded packet summary
print(decoded_pkt.summary())

# Access fields in the decoded packet
if decoded_pkt.haslayer(ASDU):
    asdu_pkt = decoded_pkt[ASDU]
    print(f"svID: {asdu_pkt.svID}")
    print(f"smpCnt: {asdu_pkt.smpCnt}")
    print(f"confRev: {asdu_pkt.confRev}")
    print(f"seqData: {asdu_pkt.seqData}")

# Further processing as needed...
